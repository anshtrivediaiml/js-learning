const coding= ["js","ruby","python","cpp"]

const values = coding.forEach((item)=>{
 console.log(item);
})

console.log(values) //Returns undefined as foreach doesnt return items 
//so items are not returned to values 

const myNums=[1,2,3,4,5,6,7,8,9,10]
 
const newNums=myNums.filter((num)=> num>4) //Returns values greater than 4 to newNums
console.log(newNums) 

const add10= myNums.map((num)=>{ return num+10})
console.log(add10)

//Chaining method 
const newNumbers=myNums.map((num)=>num*10).map((num)=> num +1)
//All the numbers are multiplied by 10 at first and then the array of 
//numbers generated by the first map is passed to the 2nd map and then 
// 1 is added to that array and is assigned to newNumbers //This is chaining 
//Many such chains can be created 
console.log(newNumbers)

//Reduce method in Javascript
const array1= [1,2,3,4]
const mytotal=array1.reduce((accumulator,currentnum)=> accumulator+currentnum,0)
console.log(mytotal)
//How this method works?? - This method takes an accumulator, a current value and an
//initial value as seen above arrow function is used or normal function can also be used 
//at first iteration accumulator refers to the initial value as specified, In the code above 
//the initial value is set to 0 and the currentnum or current value refers to the first num
// in the array1 ,therefore accumulator is 0 and currentnum is 1 therefore returns 0+1
//Now in the next iteration the result 1 is given to the accumulator and currentnum is 
//2 therefore it performs 1+2 and so on until the array 1 is completed 
//0+1=1, 1+2=3, 3+3=6, 6+4=10 and 10 is returned to mytotal

//Considering another example
 const shoppingcart=[
    {
        itemName:"JS course",
        price:299
    },
    {
        itemName:"React Course",
        price:399
    },
    {
        itemName:"Express JS Course",
        price:399
    }
 ]

let totalbillcourses= shoppingcart.reduce((acc,item)=>(acc+ item.price),0)
console.log(totalbillcourses) //This is how you can total the bill in the cart
